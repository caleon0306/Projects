// Generated by view binder compiler. Do not edit!
package com.example.caloriecounter.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.caloriecounter.R;
import com.google.android.material.textfield.TextInputEditText;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class EditMealBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button buttonGoBackToMeals;

  @NonNull
  public final Button buttonGoHome;

  @NonNull
  public final Button buttonUpdateMeal;

  @NonNull
  public final TextInputEditText inputEditMealCalories;

  @NonNull
  public final TextInputEditText inputEditMealCarbs;

  @NonNull
  public final TextInputEditText inputEditMealFats;

  @NonNull
  public final TextInputEditText inputEditMealName;

  @NonNull
  public final TextInputEditText inputEditMealProtein;

  @NonNull
  public final TextView textView17;

  @NonNull
  public final TextView textView21;

  @NonNull
  public final TextView textView22;

  @NonNull
  public final TextView textView23;

  @NonNull
  public final TextView textView24;

  private EditMealBinding(@NonNull LinearLayout rootView, @NonNull Button buttonGoBackToMeals,
      @NonNull Button buttonGoHome, @NonNull Button buttonUpdateMeal,
      @NonNull TextInputEditText inputEditMealCalories,
      @NonNull TextInputEditText inputEditMealCarbs, @NonNull TextInputEditText inputEditMealFats,
      @NonNull TextInputEditText inputEditMealName, @NonNull TextInputEditText inputEditMealProtein,
      @NonNull TextView textView17, @NonNull TextView textView21, @NonNull TextView textView22,
      @NonNull TextView textView23, @NonNull TextView textView24) {
    this.rootView = rootView;
    this.buttonGoBackToMeals = buttonGoBackToMeals;
    this.buttonGoHome = buttonGoHome;
    this.buttonUpdateMeal = buttonUpdateMeal;
    this.inputEditMealCalories = inputEditMealCalories;
    this.inputEditMealCarbs = inputEditMealCarbs;
    this.inputEditMealFats = inputEditMealFats;
    this.inputEditMealName = inputEditMealName;
    this.inputEditMealProtein = inputEditMealProtein;
    this.textView17 = textView17;
    this.textView21 = textView21;
    this.textView22 = textView22;
    this.textView23 = textView23;
    this.textView24 = textView24;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static EditMealBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static EditMealBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.edit_meal, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static EditMealBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonGoBackToMeals;
      Button buttonGoBackToMeals = ViewBindings.findChildViewById(rootView, id);
      if (buttonGoBackToMeals == null) {
        break missingId;
      }

      id = R.id.buttonGoHome;
      Button buttonGoHome = ViewBindings.findChildViewById(rootView, id);
      if (buttonGoHome == null) {
        break missingId;
      }

      id = R.id.buttonUpdateMeal;
      Button buttonUpdateMeal = ViewBindings.findChildViewById(rootView, id);
      if (buttonUpdateMeal == null) {
        break missingId;
      }

      id = R.id.inputEditMealCalories;
      TextInputEditText inputEditMealCalories = ViewBindings.findChildViewById(rootView, id);
      if (inputEditMealCalories == null) {
        break missingId;
      }

      id = R.id.inputEditMealCarbs;
      TextInputEditText inputEditMealCarbs = ViewBindings.findChildViewById(rootView, id);
      if (inputEditMealCarbs == null) {
        break missingId;
      }

      id = R.id.inputEditMealFats;
      TextInputEditText inputEditMealFats = ViewBindings.findChildViewById(rootView, id);
      if (inputEditMealFats == null) {
        break missingId;
      }

      id = R.id.inputEditMealName;
      TextInputEditText inputEditMealName = ViewBindings.findChildViewById(rootView, id);
      if (inputEditMealName == null) {
        break missingId;
      }

      id = R.id.inputEditMealProtein;
      TextInputEditText inputEditMealProtein = ViewBindings.findChildViewById(rootView, id);
      if (inputEditMealProtein == null) {
        break missingId;
      }

      id = R.id.textView17;
      TextView textView17 = ViewBindings.findChildViewById(rootView, id);
      if (textView17 == null) {
        break missingId;
      }

      id = R.id.textView21;
      TextView textView21 = ViewBindings.findChildViewById(rootView, id);
      if (textView21 == null) {
        break missingId;
      }

      id = R.id.textView22;
      TextView textView22 = ViewBindings.findChildViewById(rootView, id);
      if (textView22 == null) {
        break missingId;
      }

      id = R.id.textView23;
      TextView textView23 = ViewBindings.findChildViewById(rootView, id);
      if (textView23 == null) {
        break missingId;
      }

      id = R.id.textView24;
      TextView textView24 = ViewBindings.findChildViewById(rootView, id);
      if (textView24 == null) {
        break missingId;
      }

      return new EditMealBinding((LinearLayout) rootView, buttonGoBackToMeals, buttonGoHome,
          buttonUpdateMeal, inputEditMealCalories, inputEditMealCarbs, inputEditMealFats,
          inputEditMealName, inputEditMealProtein, textView17, textView21, textView22, textView23,
          textView24);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
